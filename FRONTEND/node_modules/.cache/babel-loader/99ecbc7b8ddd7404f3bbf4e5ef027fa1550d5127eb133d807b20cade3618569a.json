{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Msi\\\\Desktop\\\\Soft edge\\\\Soft-edge-labs\\\\FRONTEND\\\\src\\\\pages\\\\UpdateEventPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport EventForm from '../components/Form/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateEventPage = () => {\n  _s();\n  // Extract the event ID from the URL parameters\n  const {\n    id\n  } = useParams();\n  // State to hold the event data\n  const [event, setEvent] = useState(null);\n  // Hook to programmatically navigate\n  const navigate = useNavigate();\n\n  // Fetch the event details when the component mounts or the event ID changes\n  useEffect(() => {\n    const fetchEvent = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8081/api/events/${id}`);\n        setEvent(response.data);\n      } catch (error) {\n        console.error('Error fetching event', error);\n      }\n    };\n    fetchEvent();\n  }, [id]);\n\n  // Function to handle saving the updated event data\n  const handleSave = async updatedEvent => {\n    try {\n      await axios.put(`http://localhost:8081/api/events/${id}`, updatedEvent);\n      // Navigate back to the event list page after successful update\n      navigate('/');\n    } catch (error) {\n      console.error('Error updating event', error);\n    }\n  };\n\n  // Show a loading message while the event data is being fetched\n  if (!event) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EventForm, {\n      event: event,\n      onSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(UpdateEventPage, \"HpXryI04Ysk4mkXBKfrtCs4Sma0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateEventPage;\nexport default UpdateEventPage;\nvar _c;\n$RefreshReg$(_c, \"UpdateEventPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","useNavigate","EventForm","jsxDEV","_jsxDEV","UpdateEventPage","_s","id","event","setEvent","navigate","fetchEvent","response","get","data","error","console","handleSave","updatedEvent","put","children","fileName","_jsxFileName","lineNumber","columnNumber","onSave","_c","$RefreshReg$"],"sources":["C:/Users/Msi/Desktop/Soft edge/Soft-edge-labs/FRONTEND/src/pages/UpdateEventPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport EventForm from '../components/Form/EventForm';\r\n\r\nconst UpdateEventPage = () => {\r\n    // Extract the event ID from the URL parameters\r\n    const { id } = useParams();\r\n    // State to hold the event data\r\n    const [event, setEvent] = useState(null);\r\n    // Hook to programmatically navigate\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch the event details when the component mounts or the event ID changes\r\n    useEffect(() => {\r\n        const fetchEvent = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8081/api/events/${id}`);\r\n                setEvent(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching event', error);\r\n            }\r\n        };\r\n        fetchEvent();\r\n    }, [id]);\r\n\r\n    // Function to handle saving the updated event data\r\n    const handleSave = async (updatedEvent) => {\r\n        try {\r\n            await axios.put(`http://localhost:8081/api/events/${id}`, updatedEvent);\r\n            // Navigate back to the event list page after successful update\r\n            navigate('/');\r\n        } catch (error) {\r\n            console.error('Error updating event', error);\r\n        }\r\n    };\r\n\r\n    // Show a loading message while the event data is being fetched\r\n    if (!event) return <p>Loading...</p>;\r\n\r\n    return (\r\n        <div>\r\n            {/* Render the EventForm component with the current event data and handleSave callback */}\r\n            <EventForm event={event} onSave={handleSave} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateEventPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,SAAS,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC1B;EACA,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA,MAAMa,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACZ,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,oCAAoCN,EAAE,EAAE,CAAC;QAC1EE,QAAQ,CAACG,QAAQ,CAACE,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IACDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;;EAER;EACA,MAAMU,UAAU,GAAG,MAAOC,YAAY,IAAK;IACvC,IAAI;MACA,MAAMnB,KAAK,CAACoB,GAAG,CAAC,oCAAoCZ,EAAE,EAAE,EAAEW,YAAY,CAAC;MACvE;MACAR,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAED;EACA,IAAI,CAACP,KAAK,EAAE,oBAAOJ,OAAA;IAAAgB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEpC,oBACIpB,OAAA;IAAAgB,QAAA,eAEIhB,OAAA,CAACF,SAAS;MAACM,KAAK,EAAEA,KAAM;MAACiB,MAAM,EAAER;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEd,CAAC;AAAClB,EAAA,CAzCID,eAAe;EAAA,QAEFL,SAAS,EAIPC,WAAW;AAAA;AAAAyB,EAAA,GAN1BrB,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}